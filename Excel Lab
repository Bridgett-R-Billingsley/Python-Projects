{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WUkl8-VUARqQ"
      },
      "source": [
        "<img src=\"http://imgur.com/1ZcRyrc.png\" style=\"float: left; margin: 20px; height: 55px\" />\n",
        "\n",
        "# Excel Madness Lab!\n",
        "\n",
        "_Author:_ Tim Book"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4EcXV1RIARqY"
      },
      "source": [
        "## Our Mission\n",
        "We work for a large supermarket chain, with stores in 10 major cities that happen to coincide with General Assembly campuses. However, this company's idea of a \"database\" is just a bunch of Excel spreadsheets! In order to analyze our data, we're going to need to process the existing data into a form we can use. **Our end goal is to have one csv per city.**\n",
        "\n",
        "## Cleanup Duty!\n",
        "It is a hard truth that data scientists spend a large majority of their time cleaning data. Data never arrives on our desks in exactly the format in which we want it, and it's up to us to transform it to a workable format.\n",
        "\n",
        "Being good cleaning, moving, and reshaping data is in itself a valuable and employable job skill. If you follow these directions exactly, we will walk through constructing an automated process for processing data from this supermarket chain."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qj9hXsg2ARqZ"
      },
      "source": [
        "# Part I: Processing\n",
        "\n",
        "### Step 1: Imports and the `os` library\n",
        "We're going to import three libraries: numpy, pandas, and `os`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "n9w5PgAuARqa"
      },
      "outputs": [],
      "source": [
        "# Import libraries here.\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mounting Google Drive:\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F9Xc0bo6Ax_B",
        "outputId": "b9a97f8b-2228-412d-c07e-75d78530e7bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ajs_Vx5QARqb"
      },
      "source": [
        "The `os` library is extremely useful for performing system commands from within Python. Let's get two pieces of overhead out of the way now:\n",
        "\n",
        "1. Create an `output` folder using `os.mkdir()`\n",
        "2. Create a variable called `files` that is the list of files in the `data` folder using `os.listdir()`\n",
        "\n",
        "**WARNING:** The `os.mkdir()` function will give you an error if you try to make a folder that already exists!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7r1rmEiSARqc"
      },
      "outputs": [],
      "source": [
        "directory_nam = 'directory'\n",
        "\n",
        "# Create an output folder.\n",
        "os.mkdir('directory_nam')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qUo5DBGnARqc",
        "outputId": "1b050852-6037-444c-e8d7-dd2dae7e0e24"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Jan 30.xlsx',\n",
              " 'Jan 12.xlsx',\n",
              " 'Jan 18.xlsx',\n",
              " 'Jan 29.xlsx',\n",
              " 'Jan 16.xlsx',\n",
              " 'Jan 15.xlsx',\n",
              " 'Jan 31.xlsx',\n",
              " 'Jan 28.xlsx',\n",
              " 'Jan 23.xlsx',\n",
              " 'Jan 2.xlsx',\n",
              " 'Jan 4.xlsx',\n",
              " 'Jan 20.xlsx',\n",
              " 'Jan 13.xlsx',\n",
              " 'Jan 7.xlsx',\n",
              " 'Jan 6.xlsx',\n",
              " 'Jan 27.xlsx',\n",
              " 'Jan 26.xlsx',\n",
              " 'Jan 5.xlsx',\n",
              " 'Jan 24.xlsx',\n",
              " 'Jan 21.xlsx',\n",
              " 'Jan 22.xlsx',\n",
              " 'Jan 17.xlsx',\n",
              " 'Jan 3.xlsx',\n",
              " 'Jan 9.xlsx',\n",
              " 'Jan 14.xlsx',\n",
              " 'Jan 10.xlsx',\n",
              " 'Jan 25.xlsx',\n",
              " 'Jan 1.xlsx',\n",
              " 'Jan 8.xlsx',\n",
              " 'Jan 11.xlsx',\n",
              " 'Jan 19.xlsx',\n",
              " 'data']"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "# Create a files variable that contains all of our data files.\n",
        "files = os.listdir('/content/drive/MyDrive/data')\n",
        "files"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iFFeZSUyARqd"
      },
      "source": [
        "### Step 2: Process one data frame\n",
        "It looks like we have data for the month of January. 31 files of 10 sheets each! Luckily they are all in the same format. So let's read just one in and process that. It might be helpful to open one up in your spreadsheet viewer of choice first (Excel, Numbers, Sheets, etc.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_oBj12ytARqd",
        "outputId": "413b67eb-3dd9-4ad6-d0e5-413705b24bf5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   prodcode  price_eu  weight_kg  quantity\n",
            "0      4159  2.048141   8.812961       138\n",
            "1      4062  2.728485   9.331372       184\n",
            "2      4404  2.182498   8.937798       491\n",
            "3      4412  2.342694   7.067682       218\n",
            "4      4131  1.802839   9.551503       391\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "df = pd.read_excel('/content/drive/MyDrive/data/Jan 1.xlsx', sheet_name='New York')\n",
        "      \n",
        "\n",
        "# Print the first 5 rows \n",
        "print(df.head())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SbL94aTDARqe"
      },
      "source": [
        "### Step 2a: Convert to 'Merican columns\n",
        "For whatever reason, our data are stored in euros and kilograms. Create `price_usd` and `weight_lb` columns. There are 2.2 pounds per kilogram, and 1.1 dollars per euro."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_New_York = pd.read_excel('/content/drive/MyDrive/data/Jan 1.xlsx', sheet_name = 'New York')\n",
        "df_New_York"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "LhJ5XCq7cAxN",
        "outputId": "e6d73ca6-fe9a-4eea-95ba-1324d1ec2662"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     prodcode  price_eu  weight_kg  quantity\n",
              "0        4159  2.048141   8.812961       138\n",
              "1        4062  2.728485   9.331372       184\n",
              "2        4404  2.182498   8.937798       491\n",
              "3        4412  2.342694   7.067682       218\n",
              "4        4131  1.802839   9.551503       391\n",
              "..        ...       ...        ...       ...\n",
              "124      4796  1.827676   7.922745       444\n",
              "125      4225  2.463229   5.839095       258\n",
              "126      4134  0.920152   9.225959       395\n",
              "127      3302  1.510998   2.667668       168\n",
              "128      4309  1.678941   3.539966       282\n",
              "\n",
              "[129 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dc8b7ba2-194b-4962-9060-15ea3bd3e04b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prodcode</th>\n",
              "      <th>price_eu</th>\n",
              "      <th>weight_kg</th>\n",
              "      <th>quantity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4159</td>\n",
              "      <td>2.048141</td>\n",
              "      <td>8.812961</td>\n",
              "      <td>138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4062</td>\n",
              "      <td>2.728485</td>\n",
              "      <td>9.331372</td>\n",
              "      <td>184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4404</td>\n",
              "      <td>2.182498</td>\n",
              "      <td>8.937798</td>\n",
              "      <td>491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4412</td>\n",
              "      <td>2.342694</td>\n",
              "      <td>7.067682</td>\n",
              "      <td>218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4131</td>\n",
              "      <td>1.802839</td>\n",
              "      <td>9.551503</td>\n",
              "      <td>391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>4796</td>\n",
              "      <td>1.827676</td>\n",
              "      <td>7.922745</td>\n",
              "      <td>444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>4225</td>\n",
              "      <td>2.463229</td>\n",
              "      <td>5.839095</td>\n",
              "      <td>258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>4134</td>\n",
              "      <td>0.920152</td>\n",
              "      <td>9.225959</td>\n",
              "      <td>395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>3302</td>\n",
              "      <td>1.510998</td>\n",
              "      <td>2.667668</td>\n",
              "      <td>168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>4309</td>\n",
              "      <td>1.678941</td>\n",
              "      <td>3.539966</td>\n",
              "      <td>282</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>129 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc8b7ba2-194b-4962-9060-15ea3bd3e04b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dc8b7ba2-194b-4962-9060-15ea3bd3e04b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dc8b7ba2-194b-4962-9060-15ea3bd3e04b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ELZdaE5oARqf",
        "outputId": "27ed9fa9-7870-4e42-fb67-bfc76a561141"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   prodcode  price_eu  weight_kg  quantity  price_usd  weight_lb\n",
            "0      4159  2.048141   8.812961       138   2.252955  19.388515\n",
            "1      4062  2.728485   9.331372       184   3.001334  20.529018\n",
            "2      4404  2.182498   8.937798       491   2.400748  19.663156\n",
            "3      4412  2.342694   7.067682       218   2.576964  15.548899\n",
            "4      4131  1.802839   9.551503       391   1.983123  21.013306\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Create column for price in USD\n",
        "df['price_usd'] = df['price_eu'] * 1.1\n",
        "\n",
        "# Create column for weight in pounds\n",
        "df['weight_lb'] = df['weight_kg'] * 2.2\n",
        "\n",
        "# Print the first 5 rows \n",
        "print(df.head())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wo8PHYKFARqf"
      },
      "source": [
        "### Step 2b: Merge in product names\n",
        "You'll notice we also have a `plu-codes.csv` file containing actual product names matched up against their price lookup (PLU) codes. Let's merge these product names onto our Jan 1 data.\n",
        "* _Hint 1:_ What kind of merge is this? Right, left, inner, outer, etc.?\n",
        "* _Hint 2:_ Pay special attention to column names!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "6sThjxfEARqh",
        "outputId": "8198d93b-50e9-47e0-9d37-ff8e47f858c6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        product  plu_code\n",
              "0  Apple (Fuji)      4131\n",
              "1  Apple (Gala)      4134\n",
              "2       Apricot      3302\n",
              "3       Avocado      4225\n",
              "4        Banana      4011"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe10bb1d-d18c-44ee-9786-f1e0713257e0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product</th>\n",
              "      <th>plu_code</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Apple (Fuji)</td>\n",
              "      <td>4131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Apple (Gala)</td>\n",
              "      <td>4134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Apricot</td>\n",
              "      <td>3302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Avocado</td>\n",
              "      <td>4225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Banana</td>\n",
              "      <td>4011</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe10bb1d-d18c-44ee-9786-f1e0713257e0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fe10bb1d-d18c-44ee-9786-f1e0713257e0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fe10bb1d-d18c-44ee-9786-f1e0713257e0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "plu = pd.read_csv(\"/content/plu-codes.csv\")\n",
        "plu.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Convert plu_code to 'prodcod' using rename\n",
        "#plu = plu.rename(columns={'plu_code': 'prodcode'})\n"
      ],
      "metadata": {
        "id": "1CYbH7ZP-9Qf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BPuWTMEjARqi",
        "outputId": "f8a47e1a-d888-4071-a547-4d5bb946f05d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   prodcode  price_eu  weight_kg  quantity  price_usd  weight_lb       product\n",
            "0      4159  2.048141   8.812961       138   2.252955  19.388515         Onion\n",
            "1      4062  2.728485   9.331372       184   3.001334  20.529018      Cucumber\n",
            "2      4404  2.182498   8.937798       491   2.400748  19.663156         Peach\n",
            "3      4412  2.342694   7.067682       218   2.576964  15.548899          Pear\n",
            "4      4131  1.802839   9.551503       391   1.983123  21.013306  Apple (Fuji)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "# Merge the two DataFrames based on the 'prodcode' column using a left join\n",
        "merged_df = pd.merge(df, plu, on='prodcode', how='left')\n",
        "\n",
        "# Print the first 5 rows of the merged DataFrame to verify the merge\n",
        "print(merged_df.head())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sMP7HHHFARqi"
      },
      "source": [
        "### Step 2c: Drop unnecessary columns\n",
        "We've created some extraneous columns. Drop the old price and weight columns, as well as any redundant columns."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zhq0c6uwARqi"
      },
      "outputs": [],
      "source": [
        "# Drop redundant columns: price_eu and weight_kg\n",
        "\n",
        "\n",
        "merged_df = merged_df.drop(['price_eu', 'weight_kg'], axis=1)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WN5HfvOGS415",
        "outputId": "1eca11f8-2bb0-447f-b8b5-b2190328d068"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   prodcode  quantity  price_usd  weight_lb       product\n",
              "0      4159       138   2.252955  19.388515         Onion\n",
              "1      4062       184   3.001334  20.529018      Cucumber\n",
              "2      4404       491   2.400748  19.663156         Peach\n",
              "3      4412       218   2.576964  15.548899          Pear\n",
              "4      4131       391   1.983123  21.013306  Apple (Fuji)"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e67ef6fb-ea0f-4c40-973e-bd4fb21a2f30\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prodcode</th>\n",
              "      <th>quantity</th>\n",
              "      <th>price_usd</th>\n",
              "      <th>weight_lb</th>\n",
              "      <th>product</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4159</td>\n",
              "      <td>138</td>\n",
              "      <td>2.252955</td>\n",
              "      <td>19.388515</td>\n",
              "      <td>Onion</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4062</td>\n",
              "      <td>184</td>\n",
              "      <td>3.001334</td>\n",
              "      <td>20.529018</td>\n",
              "      <td>Cucumber</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4404</td>\n",
              "      <td>491</td>\n",
              "      <td>2.400748</td>\n",
              "      <td>19.663156</td>\n",
              "      <td>Peach</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4412</td>\n",
              "      <td>218</td>\n",
              "      <td>2.576964</td>\n",
              "      <td>15.548899</td>\n",
              "      <td>Pear</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4131</td>\n",
              "      <td>391</td>\n",
              "      <td>1.983123</td>\n",
              "      <td>21.013306</td>\n",
              "      <td>Apple (Fuji)</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e67ef6fb-ea0f-4c40-973e-bd4fb21a2f30')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e67ef6fb-ea0f-4c40-973e-bd4fb21a2f30 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e67ef6fb-ea0f-4c40-973e-bd4fb21a2f30');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "21TF1vaAARqi"
      },
      "source": [
        "### Step 2d: Add the date\n",
        "Simply create a new `date` column that is the date this data was collected. For example, if this is from `Jan 1.xlsx`, this column should be full of `Jan 1`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FFnJWq8iARqj"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Extract date\n",
        "file_name = 'Jan 1.xlsx'\n",
        "date_str = file_name.split('.')[0]\n",
        "date = pd.to_datetime(date_str, format='%b %d')\n",
        "\n",
        "# Create a new column date\n",
        "merged_df['date'] = merged_df.apply(lambda x: date.strftime('%b %d'), axis=1)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "merged_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "s2mPoDuSTkcq",
        "outputId": "22407ea5-ca8c-4177-98a1-6bd8bebba143"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     prodcode  quantity  price_usd  weight_lb       product    date\n",
              "0        4159       138   2.252955  19.388515         Onion  Jan 01\n",
              "1        4062       184   3.001334  20.529018      Cucumber  Jan 01\n",
              "2        4404       491   2.400748  19.663156         Peach  Jan 01\n",
              "3        4412       218   2.576964  15.548899          Pear  Jan 01\n",
              "4        4131       391   1.983123  21.013306  Apple (Fuji)  Jan 01\n",
              "..        ...       ...        ...        ...           ...     ...\n",
              "124      4796       444   2.010444  17.430039        Tomato  Jan 01\n",
              "125      4225       258   2.709552  12.846008       Avocado  Jan 01\n",
              "126      4134       395   1.012167  20.297110  Apple (Gala)  Jan 01\n",
              "127      3302       168   1.662098   5.868870       Apricot  Jan 01\n",
              "128      4309       282   1.846835   7.787925        Lychee  Jan 01\n",
              "\n",
              "[129 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ed1a9be-842d-4af2-82ea-84a46183d4e7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prodcode</th>\n",
              "      <th>quantity</th>\n",
              "      <th>price_usd</th>\n",
              "      <th>weight_lb</th>\n",
              "      <th>product</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4159</td>\n",
              "      <td>138</td>\n",
              "      <td>2.252955</td>\n",
              "      <td>19.388515</td>\n",
              "      <td>Onion</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4062</td>\n",
              "      <td>184</td>\n",
              "      <td>3.001334</td>\n",
              "      <td>20.529018</td>\n",
              "      <td>Cucumber</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4404</td>\n",
              "      <td>491</td>\n",
              "      <td>2.400748</td>\n",
              "      <td>19.663156</td>\n",
              "      <td>Peach</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4412</td>\n",
              "      <td>218</td>\n",
              "      <td>2.576964</td>\n",
              "      <td>15.548899</td>\n",
              "      <td>Pear</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4131</td>\n",
              "      <td>391</td>\n",
              "      <td>1.983123</td>\n",
              "      <td>21.013306</td>\n",
              "      <td>Apple (Fuji)</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>4796</td>\n",
              "      <td>444</td>\n",
              "      <td>2.010444</td>\n",
              "      <td>17.430039</td>\n",
              "      <td>Tomato</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>4225</td>\n",
              "      <td>258</td>\n",
              "      <td>2.709552</td>\n",
              "      <td>12.846008</td>\n",
              "      <td>Avocado</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>4134</td>\n",
              "      <td>395</td>\n",
              "      <td>1.012167</td>\n",
              "      <td>20.297110</td>\n",
              "      <td>Apple (Gala)</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>3302</td>\n",
              "      <td>168</td>\n",
              "      <td>1.662098</td>\n",
              "      <td>5.868870</td>\n",
              "      <td>Apricot</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>4309</td>\n",
              "      <td>282</td>\n",
              "      <td>1.846835</td>\n",
              "      <td>7.787925</td>\n",
              "      <td>Lychee</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>129 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ed1a9be-842d-4af2-82ea-84a46183d4e7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4ed1a9be-842d-4af2-82ea-84a46183d4e7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4ed1a9be-842d-4af2-82ea-84a46183d4e7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uCpuB7ZKARqj"
      },
      "source": [
        "### Step 3: Write a function that conducts all of Step 2\n",
        "This function should import a **filename and a city name** and return a fully processed DataFrame. That is, the function should:\n",
        "1. Read in the data from the given file and city.\n",
        "1. Create USD and pound columns.\n",
        "1. Merge in product names.\n",
        "1. Drop unnecessary columns.\n",
        "1. Add a date column"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AyWNKDrcARqj"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "def process_data(files, sheet_name):\n",
        "    # Read in the data from the given file and city\n",
        "    excel_file = os.path.join('/content/drive/MyDrive/data',files)\n",
        "    df = pd.read_excel(excel_file, sheet_name)\n",
        "    \n",
        "    # Create USD and pound columns\n",
        "    df['price_usd'] = df['price_eu'] * 1.1\n",
        "    df['weight_lb'] = df['weight_kg'] * 2.2\n",
        "    \n",
        "    # Merge in product names\n",
        "    plu_file = os.path.join(\"/content/plu-codes.csv\")\n",
        "    plu = pd.read_csv(plu_file)\n",
        "    plu.rename(columns={'plu_code': 'prodcode'}, inplace=True)\n",
        "    merged_df = pd.merge(df, plu, on='prodcode', how='left')\n",
        "    \n",
        "    # Drop unnecessary columns\n",
        "    merged_df.drop(columns=['price_eu', 'weight_kg'], inplace=True)\n",
        "    \n",
        "    # Add a date column\n",
        "    date_str = files.split('.')[0]\n",
        "    date = pd.to_datetime(date_str, format='%b %d')\n",
        "    merged_df['date'] = merged_df.apply(lambda x: date.strftime('%b %d'), axis=1)\n",
        "    \n",
        "    return merged_df\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oqMXXuUEARqk"
      },
      "source": [
        "Test your function out on a new file and city!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "s8XSeRy8ARqk",
        "outputId": "f0b9f57c-28c0-4af0-82df-7d819fea9c35"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     prodcode  quantity  price_usd  weight_lb       product    date\n",
              "0        4134       498   2.153334  17.287309  Apple (Gala)  Jan 01\n",
              "1        4012       384   1.003821  12.642420        Orange  Jan 01\n",
              "2        4323       431   0.814828  19.247589  Strawberries  Jan 01\n",
              "3        4078       457   1.728686  15.536389          Corn  Jan 01\n",
              "4        4323       316   1.528344   2.458212  Strawberries  Jan 01\n",
              "..        ...       ...        ...        ...           ...     ...\n",
              "172      4131       309   0.864199   7.000650  Apple (Fuji)  Jan 01\n",
              "173      4958       144   1.946128   3.702045         Lemon  Jan 01\n",
              "174      4272       455   2.057089   9.947643        Grapes  Jan 01\n",
              "175      3302       482   0.936777   2.459543       Apricot  Jan 01\n",
              "176      4240       116   1.016865  19.376489   Blueberries  Jan 01\n",
              "\n",
              "[177 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3a0cfae6-4ad8-4d9c-871f-0cb0811bd85c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prodcode</th>\n",
              "      <th>quantity</th>\n",
              "      <th>price_usd</th>\n",
              "      <th>weight_lb</th>\n",
              "      <th>product</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4134</td>\n",
              "      <td>498</td>\n",
              "      <td>2.153334</td>\n",
              "      <td>17.287309</td>\n",
              "      <td>Apple (Gala)</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4012</td>\n",
              "      <td>384</td>\n",
              "      <td>1.003821</td>\n",
              "      <td>12.642420</td>\n",
              "      <td>Orange</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4323</td>\n",
              "      <td>431</td>\n",
              "      <td>0.814828</td>\n",
              "      <td>19.247589</td>\n",
              "      <td>Strawberries</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4078</td>\n",
              "      <td>457</td>\n",
              "      <td>1.728686</td>\n",
              "      <td>15.536389</td>\n",
              "      <td>Corn</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4323</td>\n",
              "      <td>316</td>\n",
              "      <td>1.528344</td>\n",
              "      <td>2.458212</td>\n",
              "      <td>Strawberries</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>172</th>\n",
              "      <td>4131</td>\n",
              "      <td>309</td>\n",
              "      <td>0.864199</td>\n",
              "      <td>7.000650</td>\n",
              "      <td>Apple (Fuji)</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>173</th>\n",
              "      <td>4958</td>\n",
              "      <td>144</td>\n",
              "      <td>1.946128</td>\n",
              "      <td>3.702045</td>\n",
              "      <td>Lemon</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>174</th>\n",
              "      <td>4272</td>\n",
              "      <td>455</td>\n",
              "      <td>2.057089</td>\n",
              "      <td>9.947643</td>\n",
              "      <td>Grapes</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175</th>\n",
              "      <td>3302</td>\n",
              "      <td>482</td>\n",
              "      <td>0.936777</td>\n",
              "      <td>2.459543</td>\n",
              "      <td>Apricot</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176</th>\n",
              "      <td>4240</td>\n",
              "      <td>116</td>\n",
              "      <td>1.016865</td>\n",
              "      <td>19.376489</td>\n",
              "      <td>Blueberries</td>\n",
              "      <td>Jan 01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>177 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a0cfae6-4ad8-4d9c-871f-0cb0811bd85c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3a0cfae6-4ad8-4d9c-871f-0cb0811bd85c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3a0cfae6-4ad8-4d9c-871f-0cb0811bd85c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 96
        }
      ],
      "source": [
        "process_data('Jan 1.xlsx', 'Boston')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3X9NkZqPARqk"
      },
      "source": [
        "### Step 4: Process all of January's data\n",
        "For each spreadsheet, process the data and store the resulting DataFrame in one big list. **You only need to do this for your city!**\n",
        "\n",
        "* _Hint 1:_ A listcomp would make this whole step one line of code!\n",
        "* _Hint 2:_ You've already made that `files` variable to help you here."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BkG6Fd0KARqk"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "files = ['Jan 30.xlsx', 'Jan 12.xlsx', 'Jan 18.xlsx', 'Jan 29.xlsx', 'Jan 16.xlsx', 'Jan 15.xlsx', 'Jan 31.xlsx', 'Jan 28.xlsx', 'Jan 23.xlsx', 'Jan 2.xlsx', 'Jan 4.xlsx', 'Jan 20.xlsx', 'Jan 13.xlsx', 'Jan 7.xlsx', 'Jan 6.xlsx', 'Jan 27.xlsx', 'Jan 26.xlsx', 'Jan 5.xlsx', 'Jan 24.xlsx', 'Jan 21.xlsx', 'Jan 22.xlsx', 'Jan 17.xlsx', 'Jan 3.xlsx', 'Jan 9.xlsx', 'Jan 14.xlsx', 'Jan 10.xlsx', 'Jan 25.xlsx', 'Jan 1.xlsx', 'Jan 8.xlsx', 'Jan 11.xlsx', 'Jan 19.xlsx', 'data']\n",
        "\n",
        "new_york_data = [process_data(file, 'New York') for file in files if file.endswith('.xlsx') and file != 'data']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6fizql6rARqk"
      },
      "source": [
        "### Step 5: Concatenate all DataFrames from Step 4 into one large DataFrame\n",
        "* _Hint:_ Is there a function in `pandas` that can do something like this for us? This is also just one line of code!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "vweqNL4wARql",
        "outputId": "761a95c5-ec24-463a-c93d-51c00eb9d3ec"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     prodcode  quantity  price_usd  weight_lb      product    date\n",
              "0        4272       184   2.850434  18.339284       Grapes  Jan 30\n",
              "1        4078       309   2.316651   4.952946         Corn  Jan 30\n",
              "2        4272       136   1.213374  10.712953       Grapes  Jan 30\n",
              "3        4240       132   2.490045  17.710646  Blueberries  Jan 30\n",
              "4        4078       388   0.572955   2.579667         Corn  Jan 30\n",
              "..        ...       ...        ...        ...          ...     ...\n",
              "145      4412       379   1.856248   5.477888         Pear  Jan 19\n",
              "146      4062       387   1.006602   9.728676     Cucumber  Jan 19\n",
              "147      4078       348   2.326053   3.370959         Corn  Jan 19\n",
              "148      4011       469   3.028472  17.447030       Banana  Jan 19\n",
              "149      4412       413   0.654637   9.525665         Pear  Jan 19\n",
              "\n",
              "[4639 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6f5b36ae-451d-4f9a-9f60-5477d50e3cc2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>prodcode</th>\n",
              "      <th>quantity</th>\n",
              "      <th>price_usd</th>\n",
              "      <th>weight_lb</th>\n",
              "      <th>product</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4272</td>\n",
              "      <td>184</td>\n",
              "      <td>2.850434</td>\n",
              "      <td>18.339284</td>\n",
              "      <td>Grapes</td>\n",
              "      <td>Jan 30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4078</td>\n",
              "      <td>309</td>\n",
              "      <td>2.316651</td>\n",
              "      <td>4.952946</td>\n",
              "      <td>Corn</td>\n",
              "      <td>Jan 30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4272</td>\n",
              "      <td>136</td>\n",
              "      <td>1.213374</td>\n",
              "      <td>10.712953</td>\n",
              "      <td>Grapes</td>\n",
              "      <td>Jan 30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4240</td>\n",
              "      <td>132</td>\n",
              "      <td>2.490045</td>\n",
              "      <td>17.710646</td>\n",
              "      <td>Blueberries</td>\n",
              "      <td>Jan 30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4078</td>\n",
              "      <td>388</td>\n",
              "      <td>0.572955</td>\n",
              "      <td>2.579667</td>\n",
              "      <td>Corn</td>\n",
              "      <td>Jan 30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>4412</td>\n",
              "      <td>379</td>\n",
              "      <td>1.856248</td>\n",
              "      <td>5.477888</td>\n",
              "      <td>Pear</td>\n",
              "      <td>Jan 19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>4062</td>\n",
              "      <td>387</td>\n",
              "      <td>1.006602</td>\n",
              "      <td>9.728676</td>\n",
              "      <td>Cucumber</td>\n",
              "      <td>Jan 19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>4078</td>\n",
              "      <td>348</td>\n",
              "      <td>2.326053</td>\n",
              "      <td>3.370959</td>\n",
              "      <td>Corn</td>\n",
              "      <td>Jan 19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>4011</td>\n",
              "      <td>469</td>\n",
              "      <td>3.028472</td>\n",
              "      <td>17.447030</td>\n",
              "      <td>Banana</td>\n",
              "      <td>Jan 19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>4412</td>\n",
              "      <td>413</td>\n",
              "      <td>0.654637</td>\n",
              "      <td>9.525665</td>\n",
              "      <td>Pear</td>\n",
              "      <td>Jan 19</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4639 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f5b36ae-451d-4f9a-9f60-5477d50e3cc2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6f5b36ae-451d-4f9a-9f60-5477d50e3cc2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6f5b36ae-451d-4f9a-9f60-5477d50e3cc2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ],
      "source": [
        "new_york = pd.concat(new_york_data)\n",
        "new_york"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5YaLXLHhARql"
      },
      "source": [
        "### Step 6: Do this for all cities, write data\n",
        "Here's the big one. For each city, process and the data as in steps 3-5, and then write the data to our `output` folder. Below is a dictionary of city name to desired output file name.\n",
        "\n",
        "Before writing your DataFrame, do the following:\n",
        "* Add a `city` column\n",
        "* Reorder the columns into the following order:\n",
        "\n",
        "\n",
        "| city | date | product | prodcode | quantity | weight_lb | price_usd |\n",
        "|---|---|---|---|---|---|---|\n",
        "\n",
        "* _Hint:_ You can reorder DataFrame columns simply by writing over your DataFrame with itself, but specifying the specific column order with `.loc`. For example:\n",
        "\n",
        "`print(df)`\n",
        "\n",
        "| b | c | a |\n",
        "|---|---|---|\n",
        "| 1 | 2 | 3 |\n",
        "\n",
        "`df = df.loc[:, [\"a\", \"b\", \"c\"]]`\n",
        "\n",
        "`print(df)`\n",
        "\n",
        "| a | b | c |\n",
        "|---|---|---|\n",
        "| 3 | 1 | 2 |\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AvPePN_ZARql"
      },
      "outputs": [],
      "source": [
        "city_dict = {\n",
        "    \"Atlanta\": \"atl.csv\",\n",
        "    \"Austin\": \"atx.csv\",\n",
        "    \"Boston\": \"bos.csv\",\n",
        "    \"Chicago\": \"chi.csv\",\n",
        "    \"Denver\": \"den.csv\",\n",
        "    \"Los Angeles\": \"lax.csv\",\n",
        "    \"New York\": \"nyc.csv\",\n",
        "    \"San Francisco\": \"sf.csv\",\n",
        "    \"Seattle\": \"sea.csv\",\n",
        "    \"Washington, DC\": \"dc.csv\"\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0WRxv9IuARqm",
        "outputId": "a7c89eb6-4334-4cc3-b926-4e995b941650"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
            "/usr/local/lib/python3.9/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
          ]
        }
      ],
      "source": [
        "# Loop through city_dict and carry out Step 6 here.\n",
        "# The keys of city_dict can serve as the sheet name.\n",
        "# The values of city_dict are what you should name the output .csv files.\n",
        "# If done correctly, this cell could take almost a minute to run!\n",
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "def process_data(files, sheet_name):\n",
        "    # Read in the data from the given file and city\n",
        "    excel_file = os.path.join('/content/drive/MyDrive/data', files)\n",
        "    df = pd.read_excel(excel_file, sheet_name)\n",
        "    \n",
        "    # Create USD and pound columns\n",
        "    df['price_usd'] = df['price_eu'] * 1.1\n",
        "    df['weight_lb'] = df['weight_kg'] * 2.2\n",
        "    \n",
        "    # Merge in product names\n",
        "    plu_file = os.path.join(\"/content/plu-codes.csv\")\n",
        "    plu = pd.read_csv(plu_file)\n",
        "    plu.rename(columns={'plu_code': 'prodcode'}, inplace=True)\n",
        "    merged_df = pd.merge(df, plu, on='prodcode', how='left')\n",
        "    \n",
        "    # Drop unnecessary columns\n",
        "    merged_df.drop(columns=['price_eu', 'weight_kg'], inplace=True)\n",
        "    \n",
        "    # Add a date column\n",
        "    date_str = files.split('.')[0]\n",
        "    date = pd.to_datetime(date_str, format='%b %d')\n",
        "    merged_df['date'] = merged_df.apply(lambda x: date.strftime('%b %d'), axis=1)\n",
        "    \n",
        "    return merged_df\n",
        "\n",
        "# Define city dictionary\n",
        "city_dict = {\n",
        "    \"Atlanta\": \"atl.csv\",\n",
        "    \"Austin\": \"atx.csv\",\n",
        "    \"Boston\": \"bos.csv\",\n",
        "    \"Chicago\": \"chi.csv\",\n",
        "    \"Denver\": \"den.csv\",\n",
        "    \"Los Angeles\": \"lax.csv\",\n",
        "    \"New York\": \"nyc.csv\",\n",
        "    \"San Francisco\": \"sf.csv\",\n",
        "    \"Seattle\": \"sea.csv\",\n",
        "    \"Washington, DC\": \"dc.csv\"\n",
        "}\n",
        "\n",
        "# Loop through cities and process data\n",
        "for city in city_dict.keys():\n",
        "    # Process data for current city\n",
        "    df = process_data('Jan 1.xlsx', city)\n",
        "    \n",
        "    # Add city column\n",
        "    df['city'] = city\n",
        "    \n",
        "    # Reorder columns\n",
        "    df = df[['city', 'date', 'product', 'prodcode', 'quantity', 'weight_lb', 'price_usd']]\n",
        "    \n",
        "    # Write data to output file\n",
        "    output_file = os.path.join('/content/directory_nam', 'just_awful.csv')\n",
        "    mode = 'w' if city == 'Atlanta' else 'a'\n",
        "    df.to_csv(output_file, mode=mode, header=mode=='w', index=False)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "awful = pd.read_csv('/content/directory_nam/just_awful.csv')\n",
        "awful.head(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "kp2jFWVordmO",
        "outputId": "d0e5e7bc-9787-49f9-a872-8b32efa81cea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       city    date       product  prodcode  quantity  weight_lb  price_usd\n",
              "0   Atlanta  Jan 01        Grapes      4272       155  10.184810   1.285202\n",
              "1   Atlanta  Jan 01         Peach      4404       325   4.741293   2.196151\n",
              "2   Atlanta  Jan 01  Apple (Fuji)      4131       418  18.439256   2.223649\n",
              "3   Atlanta  Jan 01         Peach      4404       177  16.391065   3.278436\n",
              "4   Atlanta  Jan 01      Mushroom      4650       384  17.808832   1.075772\n",
              "5   Atlanta  Jan 01         Onion      4159       326   2.562657   2.621824\n",
              "6   Atlanta  Jan 01         Peach      4404       104   5.654905   1.216565\n",
              "7   Atlanta  Jan 01        Grapes      4272       203  14.053250   1.450494\n",
              "8   Atlanta  Jan 01          Pear      4412       288   3.796649   0.559723\n",
              "9   Atlanta  Jan 01        Banana      4011       471  16.204856   3.292916\n",
              "10  Atlanta  Jan 01  Apple (Fuji)      4131       499  13.360642   1.754664\n",
              "11  Atlanta  Jan 01  Strawberries      4323       184   7.799597   3.293644\n",
              "12  Atlanta  Jan 01        Lychee      4309       318   9.962724   1.090978\n",
              "13  Atlanta  Jan 01  Strawberries      4323       358  15.520018   0.856561\n",
              "14  Atlanta  Jan 01          Pear      4412       461   5.411157   1.239525"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d595fb87-b5d0-4068-8ca1-f05d8170c528\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>city</th>\n",
              "      <th>date</th>\n",
              "      <th>product</th>\n",
              "      <th>prodcode</th>\n",
              "      <th>quantity</th>\n",
              "      <th>weight_lb</th>\n",
              "      <th>price_usd</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Grapes</td>\n",
              "      <td>4272</td>\n",
              "      <td>155</td>\n",
              "      <td>10.184810</td>\n",
              "      <td>1.285202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Peach</td>\n",
              "      <td>4404</td>\n",
              "      <td>325</td>\n",
              "      <td>4.741293</td>\n",
              "      <td>2.196151</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Apple (Fuji)</td>\n",
              "      <td>4131</td>\n",
              "      <td>418</td>\n",
              "      <td>18.439256</td>\n",
              "      <td>2.223649</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Peach</td>\n",
              "      <td>4404</td>\n",
              "      <td>177</td>\n",
              "      <td>16.391065</td>\n",
              "      <td>3.278436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Mushroom</td>\n",
              "      <td>4650</td>\n",
              "      <td>384</td>\n",
              "      <td>17.808832</td>\n",
              "      <td>1.075772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Onion</td>\n",
              "      <td>4159</td>\n",
              "      <td>326</td>\n",
              "      <td>2.562657</td>\n",
              "      <td>2.621824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Peach</td>\n",
              "      <td>4404</td>\n",
              "      <td>104</td>\n",
              "      <td>5.654905</td>\n",
              "      <td>1.216565</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Grapes</td>\n",
              "      <td>4272</td>\n",
              "      <td>203</td>\n",
              "      <td>14.053250</td>\n",
              "      <td>1.450494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Pear</td>\n",
              "      <td>4412</td>\n",
              "      <td>288</td>\n",
              "      <td>3.796649</td>\n",
              "      <td>0.559723</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Banana</td>\n",
              "      <td>4011</td>\n",
              "      <td>471</td>\n",
              "      <td>16.204856</td>\n",
              "      <td>3.292916</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Apple (Fuji)</td>\n",
              "      <td>4131</td>\n",
              "      <td>499</td>\n",
              "      <td>13.360642</td>\n",
              "      <td>1.754664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Strawberries</td>\n",
              "      <td>4323</td>\n",
              "      <td>184</td>\n",
              "      <td>7.799597</td>\n",
              "      <td>3.293644</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Lychee</td>\n",
              "      <td>4309</td>\n",
              "      <td>318</td>\n",
              "      <td>9.962724</td>\n",
              "      <td>1.090978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Strawberries</td>\n",
              "      <td>4323</td>\n",
              "      <td>358</td>\n",
              "      <td>15.520018</td>\n",
              "      <td>0.856561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Atlanta</td>\n",
              "      <td>Jan 01</td>\n",
              "      <td>Pear</td>\n",
              "      <td>4412</td>\n",
              "      <td>461</td>\n",
              "      <td>5.411157</td>\n",
              "      <td>1.239525</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d595fb87-b5d0-4068-8ca1-f05d8170c528')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d595fb87-b5d0-4068-8ca1-f05d8170c528 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d595fb87-b5d0-4068-8ca1-f05d8170c528');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aQQlodZyARqm"
      },
      "source": [
        "# Part II: Checking our answers \n",
        "In steps very similar to the ones conducted above...\n",
        "1. Loop through the files we just wrote to `output`, and read them in, collecting them all in one list\n",
        "1. Combine all of those DataFrames into one large DataFrame\n",
        "1. For each city, find the mean `quantity`, `weight_lb`, and `price_usd`.\n",
        "\n",
        "If you've done everything correct, your answer should look exactly like this:\n",
        "\n",
        "![](imgs/correct-output.png)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WZG__nVGARqm",
        "outputId": "e913d241-3b13-4415-a790-965c446a7798"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                  quantity  weight_lb  price_usd\n",
            "city                                            \n",
            "Atlanta         300.342246  11.836218   1.963143\n",
            "Austin          300.323232  11.741192   1.835582\n",
            "Boston          301.378531  12.054168   1.847483\n",
            "Chicago         310.244604  11.858744   1.997456\n",
            "Denver          295.563452  12.764020   1.902594\n",
            "Los Angeles     305.020408  12.018517   1.884460\n",
            "New York        287.875969  11.958079   1.944140\n",
            "San Francisco   306.731959  12.047768   1.900404\n",
            "Seattle         311.370000  11.714645   1.798299\n",
            "Washington, DC  314.369128  11.771978   2.010899\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "# Define the directory containing the output files\n",
        "directory = \"directory_nam\"\n",
        "\n",
        "# Create an empty list to store the DataFrames\n",
        "df_list = []\n",
        "\n",
        "# Loop through the output files and read them into DataFrames\n",
        "for file in os.listdir(directory):\n",
        "    if file.endswith(\".csv\"):\n",
        "        df = pd.read_csv(os.path.join(directory, file))\n",
        "        df_list.append(df)\n",
        "\n",
        "# Concatenate the DataFrames into one large DataFrame\n",
        "df_combined = pd.concat(df_list)\n",
        "\n",
        "# Group the DataFrame by city and calculate the mean \n",
        "means = df_combined.groupby(\"city\")[[\"quantity\", \"weight_lb\", \"price_usd\"]].mean()\n",
        "\n",
        "# Print the resulting means\n",
        "print(means)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hcct63ywARqm"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.8"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
